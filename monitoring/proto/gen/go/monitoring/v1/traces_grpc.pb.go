// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: monitoring/v1/traces.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TracesService_CreateSpan_FullMethodName   = "/smartpcr.monitoring.traces.v1.TracesService/CreateSpan"
	TracesService_GetTrace_FullMethodName     = "/smartpcr.monitoring.traces.v1.TracesService/GetTrace"
	TracesService_GetAllTraces_FullMethodName = "/smartpcr.monitoring.traces.v1.TracesService/GetAllTraces"
)

// TracesServiceClient is the client API for TracesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TracesServiceClient interface {
	CreateSpan(ctx context.Context, in *CreateSpanRequest, opts ...grpc.CallOption) (*CreateSpanResponse, error)
	GetTrace(ctx context.Context, in *GetTraceRequest, opts ...grpc.CallOption) (*GetTraceResponse, error)
	GetAllTraces(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Traces, error)
}

type tracesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTracesServiceClient(cc grpc.ClientConnInterface) TracesServiceClient {
	return &tracesServiceClient{cc}
}

func (c *tracesServiceClient) CreateSpan(ctx context.Context, in *CreateSpanRequest, opts ...grpc.CallOption) (*CreateSpanResponse, error) {
	out := new(CreateSpanResponse)
	err := c.cc.Invoke(ctx, TracesService_CreateSpan_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tracesServiceClient) GetTrace(ctx context.Context, in *GetTraceRequest, opts ...grpc.CallOption) (*GetTraceResponse, error) {
	out := new(GetTraceResponse)
	err := c.cc.Invoke(ctx, TracesService_GetTrace_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tracesServiceClient) GetAllTraces(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Traces, error) {
	out := new(Traces)
	err := c.cc.Invoke(ctx, TracesService_GetAllTraces_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TracesServiceServer is the server API for TracesService service.
// All implementations must embed UnimplementedTracesServiceServer
// for forward compatibility
type TracesServiceServer interface {
	CreateSpan(context.Context, *CreateSpanRequest) (*CreateSpanResponse, error)
	GetTrace(context.Context, *GetTraceRequest) (*GetTraceResponse, error)
	GetAllTraces(context.Context, *emptypb.Empty) (*Traces, error)
	mustEmbedUnimplementedTracesServiceServer()
}

// UnimplementedTracesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTracesServiceServer struct {
}

func (UnimplementedTracesServiceServer) CreateSpan(context.Context, *CreateSpanRequest) (*CreateSpanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSpan not implemented")
}
func (UnimplementedTracesServiceServer) GetTrace(context.Context, *GetTraceRequest) (*GetTraceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTrace not implemented")
}
func (UnimplementedTracesServiceServer) GetAllTraces(context.Context, *emptypb.Empty) (*Traces, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllTraces not implemented")
}
func (UnimplementedTracesServiceServer) mustEmbedUnimplementedTracesServiceServer() {}

// UnsafeTracesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TracesServiceServer will
// result in compilation errors.
type UnsafeTracesServiceServer interface {
	mustEmbedUnimplementedTracesServiceServer()
}

func RegisterTracesServiceServer(s grpc.ServiceRegistrar, srv TracesServiceServer) {
	s.RegisterService(&TracesService_ServiceDesc, srv)
}

func _TracesService_CreateSpan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSpanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TracesServiceServer).CreateSpan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TracesService_CreateSpan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TracesServiceServer).CreateSpan(ctx, req.(*CreateSpanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TracesService_GetTrace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTraceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TracesServiceServer).GetTrace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TracesService_GetTrace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TracesServiceServer).GetTrace(ctx, req.(*GetTraceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TracesService_GetAllTraces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TracesServiceServer).GetAllTraces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TracesService_GetAllTraces_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TracesServiceServer).GetAllTraces(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// TracesService_ServiceDesc is the grpc.ServiceDesc for TracesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TracesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "smartpcr.monitoring.traces.v1.TracesService",
	HandlerType: (*TracesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSpan",
			Handler:    _TracesService_CreateSpan_Handler,
		},
		{
			MethodName: "GetTrace",
			Handler:    _TracesService_GetTrace_Handler,
		},
		{
			MethodName: "GetAllTraces",
			Handler:    _TracesService_GetAllTraces_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "monitoring/v1/traces.proto",
}
